(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(2),i=t(6),o=(t(0),t(75)),s=["components"],c={id:"subscription",title:"Push Notifications Subscription",sidebar_label:"Subscription"},a={unversionedId:"docs/subscription",id:"docs/subscription",isDocsHomePage:!1,title:"Push Notifications Subscription",description:"The typical flow for subscribing a device for receiving push notification in real time is to first register the device at the vendor's servers (e.g. FCM), then publishing the received token to your own push management servers.",source:"@site/docs/docs/subscription.md",slug:"/docs/subscription",permalink:"/react-native-notifications/docs/subscription",editUrl:"https://github.com/wix/react-native-notifications/edit/master/docs/docs/docs/subscription.md",version:"current",sidebar_label:"Subscription",sidebar:"docs",previous:{title:"React Native Notifications Getting Started Guide",permalink:"/react-native-notifications/docs/getting-started"},next:{title:"Handling Notification Events",permalink:"/react-native-notifications/docs/notifications-events"}},l=[],u={rightToc:l};function p(e){var n=e.components,t=Object(i.a)(e,s);return Object(o.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The typical flow for subscribing a device for receiving push notification in real time is to first register the device at the vendor's servers (e.g. FCM), then publishing the received token to your own push management servers."),Object(o.b)("p",null,"This section is about the first part of the flow."),Object(o.b)("p",null,"In order to handle notifications, you must register the ",Object(o.b)("inlineCode",{parentName:"p"},"remoteNotificationsRegistered")," event beforehand."),Object(o.b)("p",null,"In your React Native app:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import { Notifications } from 'react-native-notifications';\n\nclass App extends Component {\n    constructor() {\n        // Request permissions on iOS, refresh token on Android\n        Notifications.registerRemoteNotifications();\n\n        Notifications.events().registerRemoteNotificationsRegistered((event: Registered) => {\n            // TODO: Send the token to my server so it could send back push notifications...\n            console.log(\"Device Token Received\", event.deviceToken);\n        });\n        Notifications.events().registerRemoteNotificationsRegistrationFailed((event: RegistrationError) => {\n            console.error(event);\n        });\n    }\n}\n\n")),Object(o.b)("p",null,"When you have the device token, POST it to your server and register the device in your notifications provider (Amazon SNS, Azure, etc.)."),Object(o.b)("p",null,"You can check if the user granted permissions on iOS by calling ",Object(o.b)("inlineCode",{parentName:"p"},"checkPermissions()"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"Notifications.ios.checkPermissions().then((currentPermissions) => {\n    console.log('Badges enabled: ' + !!currentPermissions.badge);\n    console.log('Sounds enabled: ' + !!currentPermissions.sound);\n    console.log('Alerts enabled: ' + !!currentPermissions.alert);\n    console.log('Car Play enabled: ' + !!currentPermissions.carPlay);\n    console.log('Critical Alerts enabled: ' + !!currentPermissions.criticalAlert);\n    console.log('Provisional enabled: ' + !!currentPermissions.provisional);\n    console.log('Provides App Notification Settings enabled: ' + !!currentPermissions.providesAppNotificationSettings);\n    console.log('Announcement enabled: ' + !!currentPermissions.announcement);\n});\n")))}p.isMDXComponent=!0},75:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),u=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,f=p["".concat(s,".").concat(b)]||p[b]||d[b]||o;return t?i.a.createElement(f,c(c({ref:n},l),{},{components:t})):i.a.createElement(f,c({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=b;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=t[l];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);